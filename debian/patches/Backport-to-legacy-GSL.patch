Description: Revert modifications for GSL 3.0.0
Author: Nicholas Guriev <guriev-ns@ya.ru>
Last-Update: Thu, 12 Aug 2021 23:09:51 +0300

--- a/Telegram/SourceFiles/boxes/send_files_box.cpp
+++ b/Telegram/SourceFiles/boxes/send_files_box.cpp
@@ -115,7 +115,11 @@ SendFilesBox::Block::Block(
 
 	const auto count = till - from;
 	const auto my = gsl::make_span(*items).subspan(from, count);
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	const auto &first = my.front();
+#else  // GSL >= 3.0.0
+	const auto &first = my[0];
+#endif  // GSL >= 3.0.0
 	_isAlbum = (my.size() > 1);
 	if (_isAlbum) {
 		const auto preview = Ui::CreateChild<Ui::AlbumPreview>(
--- a/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp
+++ b/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp
@@ -40,8 +40,13 @@ int64_t File::Context::Seek(void *opaque
 }
 
 int File::Context::read(bytes::span buffer) {
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	Assert(_size >= _offset);
 	const auto amount = std::min(std::size_t(_size - _offset), buffer.size());
+#else  // GSL >= 3.0.0
+	const auto amount = std::min(size_type(_size - _offset), buffer.size());
+	Assert(amount >= 0);
+#endif  // GSL >= 3.0.0
 
 	if (unroll()) {
 		return -1;
--- a/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp
+++ b/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp
@@ -714,7 +714,11 @@ int64 TlsSocket::read(bytes::span buffer
 		if (available <= 0) {
 			return written;
 		}
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 		const auto write = std::min(std::size_t(available), buffer.size());
+#else  // GSL >= 3.0.0
+		const auto write = std::min(index_type(available), buffer.size());
+#endif  // GSL >= 3.0.0
 		if (write <= 0) {
 			return written;
 		}
--- a/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp
+++ b/Telegram/SourceFiles/mtproto/mtproto_dc_options.cpp
@@ -171,7 +171,7 @@ void DcOptions::constructFromBuiltIn() {
 	readBuiltInPublicKeys();
 
 	const auto list = isTestMode()
-		? gsl::make_span(kBuiltInDcsTest)
+		? gsl::make_span(kBuiltInDcsTest).subspan(0)
 		: gsl::make_span(kBuiltInDcs).subspan(0);
 	for (const auto &entry : list) {
 		const auto flags = Flag::f_static | 0;
@@ -183,7 +183,7 @@ void DcOptions::constructFromBuiltIn() {
 	}
 
 	const auto listv6 = isTestMode()
-		? gsl::make_span(kBuiltInDcsIPv6Test)
+		? gsl::make_span(kBuiltInDcsIPv6Test).subspan(0)
 		: gsl::make_span(kBuiltInDcsIPv6).subspan(0);
 	for (const auto &entry : listv6) {
 		const auto flags = Flag::f_static | Flag::f_ipv6;
--- a/Telegram/lib_base/base/bytes.h
+++ b/Telegram/lib_base/base/bytes.h
@@ -23,7 +23,11 @@ template <gsl::index Size>
 using array = std::array<type, Size>;
 
 inline span make_detached_span(QByteArray &container) {
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	return gsl::as_writable_bytes(gsl::make_span(container));
+#else  // GSL >= 3.0.0
+	return gsl::as_writeable_bytes(gsl::make_span(container));
+#endif  // GSL >= 3.0.0
 }
 
 template <
@@ -32,7 +36,11 @@ template <
 		!std::is_const_v<Container>
 		&& !std::is_same_v<Container, QByteArray>>>
 inline span make_span(Container &container) {
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	return gsl::as_writable_bytes(gsl::make_span(container));
+#else  // GSL >= 3.0.0
+	return gsl::as_writeable_bytes(gsl::make_span(container));
+#endif  // GSL >= 3.0.0
 }
 
 template<>
@@ -51,7 +59,11 @@ inline const_span make_span(const_span &
 
 template <typename Type, std::ptrdiff_t Extent>
 inline span make_span(gsl::span<Type, Extent> container) {
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	return gsl::as_writable_bytes(container);
+#else  // GSL >= 3.0.0
+	return gsl::as_writeable_bytes(container);
+#endif  // GSL >= 3.0.0
 }
 
 template <typename Type, std::ptrdiff_t Extent>
@@ -61,7 +73,11 @@ inline const_span make_span(gsl::span<co
 
 template <typename Type>
 inline span make_span(Type *value, std::size_t count) {
+#if defined(GSL_VERSION) && GSL_VERSION >= 30000
 	return gsl::as_writable_bytes(gsl::make_span(value, count));
+#else  // GSL >= 3.0.0
+	return gsl::as_writeable_bytes(gsl::make_span(value, count));
+#endif  // GSL >= 3.0.0
 }
 
 template <typename Type>
--- a/cmake/external/gsl/CMakeLists.txt
+++ b/cmake/external/gsl/CMakeLists.txt
@@ -16,6 +16,9 @@ if (DESKTOP_APP_USE_PACKAGED)
 
     if (Microsoft.GSL_FOUND)
         target_link_libraries(external_gsl INTERFACE Microsoft.GSL::GSL)
+
+        math(EXPR _gsl_version_num "${Microsoft.GSL_VERSION_MAJOR} * 10000 + ${Microsoft.GSL_VERSION_MINOR} * 100 + ${Microsoft.GSL_VERSION_PATCH}")
+        target_compile_definitions(external_gsl INTERFACE GSL_VERSION=${_gsl_version_num})
     endif()
 endif()
 
