Description: Fix lib_base for GSL v3.0.1
Bug: https://github.com/telegramdesktop/tdesktop/pull/7723
Author: Nicholas Guriev <guriev-ns@ya.ru>
Last-Update: Sun, 26 Apr 2020 12:59:51 +0300

diff --git a/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp b/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp
index bf78ce6a6..2ea0a1629 100644
--- a/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp
+++ b/Telegram/SourceFiles/media/streaming/media_streaming_file.cpp
@@ -40,8 +40,8 @@ int64_t File::Context::Seek(void *opaque, int64_t offset, int whence) {
 }
 
 int File::Context::read(bytes::span buffer) {
-	const auto amount = std::min(size_type(_size - _offset), buffer.size());
-	Assert(amount >= 0);
+	Assert(_size >= _offset);
+	const auto amount = std::min(std::size_t(_size - _offset), buffer.size());
 
 	if (unroll()) {
 		return -1;
diff --git a/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp b/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp
index 385dff13a..55e6e1d0c 100644
--- a/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp
+++ b/Telegram/SourceFiles/mtproto/details/mtproto_tls_socket.cpp
@@ -707,7 +707,7 @@ int64 TlsSocket::read(bytes::span buffer) {
 		if (available <= 0) {
 			return written;
 		}
-		const auto write = std::min(index_type(available), buffer.size());
+		const auto write = std::min(std::size_t(available), buffer.size());
 		if (write <= 0) {
 			return written;
 		}
Submodule Telegram/lib_base f8f796038..74edb93eb:
diff --git a/Telegram/lib_base/base/bytes.h b/Telegram/lib_base/base/bytes.h
index 1d56e82..e1ee8d9 100644
--- a/Telegram/lib_base/base/bytes.h
+++ b/Telegram/lib_base/base/bytes.h
@@ -23,7 +23,7 @@ template <gsl::index Size>
 using array = std::array<type, Size>;
 
 inline span make_detached_span(QByteArray &container) {
-	return gsl::as_writeable_bytes(gsl::make_span(container));
+	return gsl::as_writable_bytes(gsl::make_span(container));
 }
 
 template <
@@ -32,7 +32,12 @@ template <
 		!std::is_const_v<Container>
 		&& !std::is_same_v<Container, QByteArray>>>
 inline span make_span(Container &container) {
-	return gsl::as_writeable_bytes(gsl::make_span(container));
+	return gsl::as_writable_bytes(gsl::make_span(container));
+}
+
+template<>
+inline span make_span<span, void>(span &container) {
+	return container;
 }
 
 template <typename Container>
@@ -40,9 +45,13 @@ inline const_span make_span(const Container &container) {
 	return gsl::as_bytes(gsl::make_span(container));
 }
 
+inline const_span make_span(const_span &container) {
+	return container;
+}
+
 template <typename Type, std::ptrdiff_t Extent>
 inline span make_span(gsl::span<Type, Extent> container) {
-	return gsl::as_writeable_bytes(container);
+	return gsl::as_writable_bytes(container);
 }
 
 template <typename Type, std::ptrdiff_t Extent>
@@ -52,7 +61,7 @@ inline const_span make_span(gsl::span<const Type, Extent> container) {
 
 template <typename Type>
 inline span make_span(Type *value, std::size_t count) {
-	return gsl::as_writeable_bytes(gsl::make_span(value, count));
+	return gsl::as_writable_bytes(gsl::make_span(value, count));
 }
 
 template <typename Type>
