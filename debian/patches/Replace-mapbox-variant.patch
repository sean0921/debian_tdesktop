Description: Partially replace mapbox variant with std::variant
 Basic idea was taken from John Preston's commit. I've included <variant> header
 here and modified the patch to not call an unknown v::match function.
Origin: https://github.com/desktop-app/lib_storage/commit/52b8d0456fec25f80ca96e6d354dd7583f7fa350
Bug: https://github.com/telegramdesktop/tdesktop/issues/8471
Author: John Preston <johnprestonmail@gmail.com>
Acked-by: Nicholas Guriev <guriev-ns@ya.ru>
Last-Update: Tue, 01 Sep 2020 18:28:12 +0300

diff --git a/Telegram/lib_storage/storage/cache/storage_cache_compactor.cpp b/Telegram/lib_storage/storage/cache/storage_cache_compactor.cpp
index f98f9ebb7..7d3544a24 100644
--- a/Telegram/lib_storage/storage/cache/storage_cache_compactor.cpp
+++ b/Telegram/lib_storage/storage/cache/storage_cache_compactor.cpp
@@ -8,7 +8,7 @@
 
 #include "storage/cache/storage_cache_database_object.h"
 #include "storage/cache/storage_cache_binlog_reader.h"
-#include <unordered_set>
+#include <variant>
 
 namespace Storage {
 namespace Cache {
@@ -75,7 +75,7 @@ private:
 	BinlogWrapper _wrapper;
 	size_type _partSize = 0;
 	std::unordered_set<Key> _written;
-	base::variant<
+	std::variant<
 		std::vector<MultiStore::Part>,
 		std::vector<MultiStoreWithTime::Part>> _list;
 
@@ -215,9 +215,9 @@ void CompactorObject::finalize() {
 }
 
 bool CompactorObject::writeList() {
-	if (_list.is<std::vector<MultiStore::Part>>()) {
+	if (std::holds_alternative<std::vector<MultiStore::Part>>(_list)) {
 		return writeMultiStore<MultiStore>();
-	} else if (_list.is<std::vector<MultiStoreWithTime::Part>>()) {
+	} else if (std::holds_alternative<std::vector<MultiStoreWithTime::Part>>(_list)) {
 		return writeMultiStore<MultiStoreWithTime>();
 	} else {
 		Unexpected("List type in CompactorObject::writeList.");
@@ -227,8 +227,7 @@ bool CompactorObject::writeList() {
 template <typename MultiRecord>
 bool CompactorObject::writeMultiStore() {
 	using Part = typename MultiRecord::Part;
-	Assert(_list.is<std::vector<Part>>());
-	auto &list = _list.get_unchecked<std::vector<Part>>();
+	auto &list = std::get<std::vector<Part>>(_list);
 	if (list.empty()) {
 		return true;
 	}
@@ -331,9 +330,9 @@ void CompactorObject::processValues(
 }
 
 auto CompactorObject::fillList(RawSpan values) -> RawSpan {
-	return _list.match([&](auto &list) {
+	return std::visit([&](auto &list) {
 		return fillList(list, values);
-	});
+	}, _list);
 }
 
 template <typename RecordStore>
