Description: Do not require jemalloc at runtime
Author: Nicholas Guriev <guriev-ns@ya.ru>
Forwarded: https://github.com/desktop-app/cmake_helpers/pull/112
Last-Update: Thu, 29 Jul 2021 22:17:46 +0300

--- a/Telegram/SourceFiles/platform/linux/specific_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
@@ -53,6 +53,7 @@ https://github.com/telegramdesktop/tdesk
 #include <sys/sendfile.h>
 #endif // Q_OS_LINUX
 #include <cstdlib>
+#include <dlfcn.h>
 #include <unistd.h>
 #include <dirent.h>
 #include <pwd.h>
@@ -598,6 +599,47 @@ void HaikuAutostart(bool start) {
 }
 #endif // __HAIKU__
 
+decltype(mallctl)* mallctlLoad() {
+#ifdef DESKTOP_APP_REQUIRE_JEMALLOC
+	return &mallctl;
+#elif defined(__GLIBC__)
+	// Despite using glibc, one can choose jemalloc via LD_PRELOAD.
+	// Detect the case and configure the allocator.
+
+	Dl_info info;
+	int rc = dladdr(reinterpret_cast<void*>(&malloc), &info);
+	if (!rc) {
+		LOG(("Can't retrieve malloc info: %1").arg(dlerror()));
+		return nullptr;
+	}
+	LOG(("We use allocator from %1").arg(info.dli_fname));
+	if (!QLatin1String(info.dli_fname)
+			.endsWith(QLatin1String("/libjemalloc.so.2"))) {
+		return nullptr;
+	}
+
+	void *handle = dlopen(info.dli_fname, RTLD_LAZY | RTLD_NOLOAD);
+	if (!handle) {
+		LOG(("Can't reopen jemalloc dynamic object: %1").arg(dlerror()));
+		return nullptr;
+	}
+
+	auto pointer = reinterpret_cast<decltype(mallctl)*>(
+		dlsym(handle, "mallctl"));
+	if (!pointer) {
+		LOG(("Can't find mallctl function: %1").arg(dlerror()));
+	}
+
+	rc = dlclose(handle);
+	if (rc) {
+		LOG(("Can't dlclose temporary handle: %1").arg(dlerror()));
+	}
+	return pointer;
+#else  // __GLIBC__
+	return nullptr;
+#endif
+}
+
 } // namespace
 
 QString psAppDataPath() {
@@ -641,8 +683,10 @@ int psFixPrevious() {
 namespace Platform {
 
 void start() {
-	auto backgroundThread = true;
-	mallctl("background_thread", nullptr, nullptr, &backgroundThread, sizeof(bool));
+	if (auto mallctlLoaded = mallctlLoad()) {
+		bool backgroundThread = true;
+		mallctlLoaded("background_thread", nullptr, nullptr, &backgroundThread, sizeof(bool));
+	}
 
 	LOG(("Launcher filename: %1").arg(QGuiApplication::desktopFileName()));
 
--- a/cmake/external/jemalloc/CMakeLists.txt
+++ b/cmake/external/jemalloc/CMakeLists.txt
@@ -7,12 +7,22 @@
 add_library(external_jemalloc INTERFACE IMPORTED GLOBAL)
 add_library(desktop-app::external_jemalloc ALIAS external_jemalloc)
 
+set(DESKTOP_APP_REQUIRE_JEMALLOC ON CACHE BOOL "Always prefer jemalloc by FreeBSD or use system memory allocator?")
+if (DESKTOP_APP_REQUIRE_JEMALLOC)
+    target_compile_definitions(external_jemalloc INTERFACE DESKTOP_APP_REQUIRE_JEMALLOC)
+endif()
+
 if (DESKTOP_APP_USE_PACKAGED)
     find_package(PkgConfig REQUIRED)
     pkg_check_modules(JEMALLOC IMPORTED_TARGET jemalloc)
 
     if (JEMALLOC_FOUND)
-        target_link_libraries(external_jemalloc INTERFACE PkgConfig::JEMALLOC)
+        if (DESKTOP_APP_REQUIRE_JEMALLOC)
+            target_link_libraries(external_jemalloc INTERFACE PkgConfig::JEMALLOC)
+        else()
+            target_compile_definitions(external_jemalloc INTERFACE _GNU_SOURCE)
+            target_compile_options(external_jemalloc INTERFACE ${JEMALLOC_CFLAGS})
+        endif()
     endif()
 endif()
 
